name: Build
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
    types:
    - opened
    - reopened
    - synchronize
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
jobs:
  setup_build_matrix:
    name: Outputs matrix used for cross compilation
    steps:
    - uses: ./.github/workflows/build_matrix.yml
  check_if_build:
    name: Check if Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1000
    - id: check
      run: |
        chmod +x .github/scripts/check_if_build.sh
        .github/scripts/check_if_build.sh
    outputs:
      check_if_build: ${{ steps.check.outputs.check_if_build }}
  test_aws_build:
    name: Test AWS Lambda Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install cargo-lambda
      run: pip install cargo-lambda
    - name: Build
      run: cargo lambda build
    defaults:
      run:
        working-directory: ./tailcall-aws-lambda
  test_wasm:
    name: Run Tests (WASM)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        target: wasm32-unknown-unknown
    - name: Install Wasm Pack
      run: cargo install wasm-bindgen-cli --vers "0.2.92"
    - name: Test WASM
      run: |
        cargo install wasm-pack
        wasm-pack test --node
    defaults:
      run:
        working-directory: ./tailcall-wasm
  test_cf:
    name: Run Tests (Cloudflare)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        target: wasm32-unknown-unknown
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.11.0
    - name: Package Install
      run: npm install
    - name: Test CF
      run: npm test
    defaults:
      run:
        working-directory: ./tailcall-cloudflare
  test:
    name: Run Tests on ${{ matrix.build }}
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        build:
        - build1
        - build2
        - build3
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.11.0
    - name: Install Prettier
      run: npm i -g prettier
    - name: Install Rust Toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
    - name: Install Cross compilation toolchain
      uses: taiki-e/setup-cross-toolchain-action@v1
      with:
        target: ${{ matrix.target }}
    - name: Cache NASM
      uses: actions/cache@v4
      with:
        path: |
          nasm-2.16.02
          nasm.zip
        key: ${{ runner.os }}-nasm-${{ matrix.build }}-v2
        restore-keys: |
          ${{ runner.os }}-nasm-${{ matrix.build }}-
    - name: Install dependencies on Windows
      run: |
        if (Test-Path nasm-2.16.02) {
          echo "Using cached NASM"
        } else {
          $nasmUrl = 'https://www.nasm.us/pub/nasm/releasebuilds/2.16.02/win64/nasm-2.16.02-win64.zip'
          $nasmZip = 'nasm.zip'
          Invoke-WebRequest -Uri $nasmUrl -OutFile $nasmZip
          Expand-Archive -Path $nasmZip -DestinationPath '.'
        }
        echo "$(Resolve-Path nasm-2.16.02)" >> $env:GITHUB_PATH
    - uses: taiki-e/install-action@cargo-llvm-cov
    - name: Run Cargo Test
      run: cargo llvm-cov --workspace ${{ matrix.features }} --lcov --target ${{ matrix.target }} --output-path lcov.info
    - name: Upload Coverage to Codecov
      uses: Wandalen/wretry.action@v3
      with:
        action: codecov/codecov-action@v4
        attempt_limit: 3
        attempt_delay: 10000
        with: |
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true
    needs:
    - setup_build_matrix
  check-examples:
    name: Check Examples
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Install Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
    - name: Build Project
      run: cargo build
    - name: Check all examples
      run: ./examples/lint.sh
  draft_release:
    name: Draft Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Current Branch (Fast)
      uses: actions/checkout@v4
    - id: create_release
      uses: release-drafter/release-drafter@v6
      with:
        config-name: release-drafter.yml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - id: set_output
      name: Set Output for Later Jobs
      run: |
        echo "create_release_name=${{ steps.create_release.outputs.name }}" >> $GITHUB_OUTPUT
        echo "create_release_id=${{ steps.create_release.outputs.id }}" >> $GITHUB_OUTPUT
    permissions:
      contents: write
      pull-requests: write
    outputs:
      create_release_name: ${{ steps.set_output.outputs.create_release_name }}
      create_release_id: ${{ steps.set_output.outputs.create_release_id }}
  release:
    name: Release
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        build:
        - build1
        - build2
        - build3
      fail-fast: false
    steps:
    - name: Checkout Current Branch (Fast)
      uses: actions/checkout@v4
    - name: Install Rust Toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        target: ${{ matrix.target }}
    - name: Build
      uses: ClementTsang/cargo-action@v0.0.6
      with:
        use-cross: ${{ matrix.cross }}
        command: build
        args: ${{matrix.features}} --release --target ${{ matrix.target }}
      env:
        APP_VERSION: ${{ needs.draft_release.outputs.create_release_name}}
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.11.0
        registry-url: https://registry.npmjs.org
    - name: Install dependencies
      run: |
        cd npm
        npm install
    - name: Run generate.js script
      run: |
        cd npm
        npm run gen -- --target ${{matrix.target}} --version ${{ env.APP_VERSION }} --build ${{matrix.build}} --ext ${{ matrix.ext || '' }} --libc ${{ matrix.libc }}
    - name: Setup .npmrc file to publish to npm
      run: echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" > ~/.npmrc
    - name: NPM Publish
      uses: JS-DevTools/npm-publish@main
      with:
        token: ${{ secrets.NPM_TOKEN }}
        package: npm/@tailcallhq/core-${{matrix.build}}
        access: public
    - name: Rename Binary with Target Name
      run: |
        pwd
        cp target/${{ matrix.target }}/release/tailcall${{ matrix.ext }} target/${{ matrix.target }}/release/tailcall-${{ matrix.target }}${{ matrix.ext }}
    - name: Upload ${{ matrix.target }} Binary
      uses: xresloader/upload-to-github-release@v1
      with:
        release_id: ${{ needs.draft_release.outputs.create_release_id }}
        file: target/${{ matrix.target }}/release/tailcall-${{ matrix.target }}${{ matrix.ext }}
        overwrite: true
    needs:
    - setup_build_matrix
    - test
    - draft_release
    - check_if_build
    - test_cf
    - test_wasm
    permissions:
      contents: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{secrets.GITHUBTOKEN}}
      GA_API_SECRET: ${{secrets.GA_API_SECRET}}
      GA_MEASUREMENT_ID: ${{secrets.GA_MEASUREMENT_ID}}
      POSTHOG_API_SECRET: ${{secrets.POSTHOG_API_SECRET}}
      APP_VERSION: ${{ needs.draft_release.outputs.create_release_name }}
  release_lambda:
    name: Release (AWS Lambda)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Current Branch (Fast)
      uses: actions/checkout@v4
    - name: Install Correct Toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install cargo-lambda
      run: pip install cargo-lambda
    - name: Build
      run: cargo lambda build -p tailcall-aws-lambda --release --target x86_64-unknown-linux-musl
      env:
        APP_VERSION: ${{ needs.draft_release.outputs.create_release_name }}
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    - name: Rename Binary with Target Name
      run: |
        pwd
        cp target/lambda/tailcall-aws-lambda/bootstrap target/lambda/tailcall-aws-lambda/tailcall-aws-lambda-bootstrap
    - name: Upload AWS Lambda Bootstrap Binary
      uses: xresloader/upload-to-github-release@v1
      with:
        release_id: ${{ needs.draft_release.outputs.create_release_id }}
        file: target/lambda/tailcall-aws-lambda/tailcall-aws-lambda-bootstrap
        overwrite: true
    needs:
    - test
    - draft_release
    - check_if_build
    - test_cf
    permissions:
      contents: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{secrets.GITHUBTOKEN}}
      APP_VERSION: ${{ needs.draft_release.outputs.create_release_name }}
  semantic_release:
    name: Semantic Release
    runs-on: ubuntu-latest
    steps:
    - name: Publish Release
      uses: test-room-7/action-publish-release-drafts@v0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        tag-name: ${{needs.draft_release.outputs.create_release_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs:
    - draft_release
    - release
    - release_lambda
    permissions:
      contents: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      APP_VERSION: ${{needs.draft_release.outputs.create_release_name }}
  publish_npm_root:
    name: Publish NPM main package
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Current Branch (Fast)
      uses: actions/checkout@v4
    - name: Install Node
      uses: actions/setup-node@v4
      with:
        node-version: 20.11.0
        registry-url: https://registry.npmjs.org
    - name: Install Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        target: wasm32-unknown-unknown
    - name: Setup .npmrc file to publish to npm
      run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
    - name: Install dependencies
      run: |
        cd npm
        npm install
    - name: Run generate-root.js script
      run: |
        cd npm
        npm run gen-root -- --version ${{ env.APP_VERSION }} --name @tailcallhq/tailcall
      env:
        APP_VERSION: ${{needs.draft_release.outputs.create_release_name }}
    - name: Setup .npmrc file to publish to npm
      run: echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" > ~/.npmrc
    - name: Publish packages
      uses: JS-DevTools/npm-publish@main
      with:
        token: ${{ secrets.NPM_TOKEN }}
        package: npm/@tailcallhq/tailcall
        access: public
      env:
        APP_VERSION: ${{needs.draft_release.outputs.create_release_name }}
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    needs:
    - draft_release
    - release
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Log in to the Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUBTOKEN }}
    - id: meta
      name: Extract Metadata (tags, labels) for Docker
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ env.APP_VERSION }}
          type=raw,value=latest,enable=${{ endsWith(env.APP_VERSION, '-SNAPSHOT') == false }}
    - name: Build and Push the Docker Image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    needs:
    - draft_release
    - release
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}/tc-server
      APP_VERSION: ${{ needs.draft_release.outputs.create_release_name }}
  homebrew-release:
    name: Homebrew Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: tailcallhq/homebrew-tailcall
        ref: main
        token: ${{ secrets.HOMEBREW_ACCESS }}
    - name: Update Homebrew Formula
      run: ./update-formula.sh ${{needs.draft_release.outputs.create_release_name }}
    needs:
    - draft_release
    - release
    - semantic_release
    permissions:
      contents: write
      pull-requests: write